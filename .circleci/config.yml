version: 2
jobs:
  build:
    docker:
      # using custom image, see .circleci/images/primary/Dockerfile
      - image: balenalib/amd64-alpine-node:12-3.10-build
    working_directory: /usr/src/test

    environment:
      DEVICE_TYPE: "qemux86-64"
      OS_VERSION: "2.38.0+rev1"
      OS_IMAGE: "resin/resinos:2.38.0_rev1.dev-qemux86-64"

    steps:
      - checkout

      - run:
          # This should be combined all together into a tester base image
          name: Setting up balena-cli
          command: |
            npm install -g balena-cli

      - run:
          name: Log into balenaCloud
          command: |
            balena login --token "${BALENA_TOKEN}"

      - setup_remote_docker

      - run:
          # This should be combined all together into a tester base image
          name: Install Docker client
          command: |
            set -x
            apk add --no-cache docker

      - run:
          name: Set up application
          command: |
            APP_NAME="${CIRCLE_PROJECT_REPONAME:0:15}-${CIRCLE_SHA1:0:7}-${CIRCLE_BUILD_NUM}"
            echo "export APP_NAME=${APP_NAME}" >> $BASH_ENV
            balena app create "${APP_NAME}" --type "${DEVICE_TYPE}"

      - run:
          name: Push code
          command: |
            balena push "${APP_NAME}"

      - run:
          name: Get balenaOS in container code
          command: |
            git clone git@github.com:balena-os/balenaos-in-container.git
            cd balenaos-in-container
            git checkout -b test 472f5ecd698c7ced5bfc282cb47597323ccebbe4

      - run:
          name: Spin up device
          command: |
            set -x
            cd balenaos-in-container
            UUID=$(balena device register "${APP_NAME}" | awk '{ print $4 }')
            echo "export UUID=${UUID}" >> $BASH_ENV
            balena config generate -d "${UUID}" --version "${OS_VERSION}" --generate-device-api-key --output config.json --network ethernet --appUpdatePollInterval 10
            # workaround because of https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
            ./balenaos-in-container.sh -c config.json --image "${OS_IMAGE}" --id ${CIRCLE_SHA1} -d || true
            docker create -v "balena-boot-${CIRCLE_SHA1}":/mnt/boot/ -v "balena-systemd-${CIRCLE_SHA1}":/systemd/ --name configs alpine:3.10 /bin/true
            docker cp config.json configs:/mnt/boot/config.json
            docker cp conf/systemd-watchdog.conf configs:/systemd/watchdog.conf
            docker rm configs || true
            ./balenaos-in-container.sh -c config.json --image "${OS_IMAGE}" --id ${CIRCLE_SHA1} -d
            balena device public-url enable "${UUID}"
            TARGET_COMMIT=$(balena app "${APP_NAME}" | grep COMMIT | awk '{ print $2 }')
            DEVICE_COMMIT=""
            while [[ "$DEVICE_COMMIT" != "${TARGET_COMMIT}" ]]; do
              echo "Device is not yet on target state"
              sleep 10
              DEVICE_COMMIT=$(balena device "${UUID}" | grep COMMIT | awk '{ print $2 }') || true
            done

      - run:
          name: This is the test we were waiting for
          command: |
            set -x
            response=$(curl -qs --retry 10 https://${UUID}.balena-devices.com)
            [[ "${response}" == 'You done it!' ]]

      - run:
          name: Stop balenaOS container
          command: |
            CONTAINER_NAME="balena-container-${CIRCLE_SHA1}"
            docker stop "${CONTAINER_NAME}" || true

      - run:
          name: Remove Application
          command: |
            balena app rm "${APP_NAME}" --yes || true
